// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: helm/option.proto

package helm

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Options struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace        string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	RepositoryConfig string `protobuf:"bytes,2,opt,name=repository_config,json=repositoryConfig,proto3" json:"repository_config,omitempty"`
	RepositoryCache  string `protobuf:"bytes,3,opt,name=repository_cache,json=repositoryCache,proto3" json:"repository_cache,omitempty"`
	Debug            bool   `protobuf:"varint,4,opt,name=debug,proto3" json:"debug,omitempty"`
	Linting          bool   `protobuf:"varint,5,opt,name=linting,proto3" json:"linting,omitempty"`
}

func (x *Options) Reset() {
	*x = Options{}
	if protoimpl.UnsafeEnabled {
		mi := &file_helm_option_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Options) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Options) ProtoMessage() {}

func (x *Options) ProtoReflect() protoreflect.Message {
	mi := &file_helm_option_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Options.ProtoReflect.Descriptor instead.
func (*Options) Descriptor() ([]byte, []int) {
	return file_helm_option_proto_rawDescGZIP(), []int{0}
}

func (x *Options) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *Options) GetRepositoryConfig() string {
	if x != nil {
		return x.RepositoryConfig
	}
	return ""
}

func (x *Options) GetRepositoryCache() string {
	if x != nil {
		return x.RepositoryCache
	}
	return ""
}

func (x *Options) GetDebug() bool {
	if x != nil {
		return x.Debug
	}
	return false
}

func (x *Options) GetLinting() bool {
	if x != nil {
		return x.Linting
	}
	return false
}

type ListOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllNamespaces bool   `protobuf:"varint,1,opt,name=all_namespaces,json=allNamespaces,proto3" json:"all_namespaces,omitempty"`
	ByDate        bool   `protobuf:"varint,2,opt,name=by_date,json=byDate,proto3" json:"by_date,omitempty"`
	Limit         int64  `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Filter        string `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
	Short         bool   `protobuf:"varint,5,opt,name=short,proto3" json:"short,omitempty"`
	Uninstalled   bool   `protobuf:"varint,6,opt,name=uninstalled,proto3" json:"uninstalled,omitempty"`
	Superseded    bool   `protobuf:"varint,7,opt,name=superseded,proto3" json:"superseded,omitempty"`
	Uninstalling  bool   `protobuf:"varint,8,opt,name=uninstalling,proto3" json:"uninstalling,omitempty"`
	Deployed      bool   `protobuf:"varint,9,opt,name=deployed,proto3" json:"deployed,omitempty"`
	Failed        bool   `protobuf:"varint,10,opt,name=failed,proto3" json:"failed,omitempty"`
	Pending       bool   `protobuf:"varint,11,opt,name=pending,proto3" json:"pending,omitempty"`
}

func (x *ListOption) Reset() {
	*x = ListOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_helm_option_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOption) ProtoMessage() {}

func (x *ListOption) ProtoReflect() protoreflect.Message {
	mi := &file_helm_option_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOption.ProtoReflect.Descriptor instead.
func (*ListOption) Descriptor() ([]byte, []int) {
	return file_helm_option_proto_rawDescGZIP(), []int{1}
}

func (x *ListOption) GetAllNamespaces() bool {
	if x != nil {
		return x.AllNamespaces
	}
	return false
}

func (x *ListOption) GetByDate() bool {
	if x != nil {
		return x.ByDate
	}
	return false
}

func (x *ListOption) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListOption) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListOption) GetShort() bool {
	if x != nil {
		return x.Short
	}
	return false
}

func (x *ListOption) GetUninstalled() bool {
	if x != nil {
		return x.Uninstalled
	}
	return false
}

func (x *ListOption) GetSuperseded() bool {
	if x != nil {
		return x.Superseded
	}
	return false
}

func (x *ListOption) GetUninstalling() bool {
	if x != nil {
		return x.Uninstalling
	}
	return false
}

func (x *ListOption) GetDeployed() bool {
	if x != nil {
		return x.Deployed
	}
	return false
}

func (x *ListOption) GetFailed() bool {
	if x != nil {
		return x.Failed
	}
	return false
}

func (x *ListOption) GetPending() bool {
	if x != nil {
		return x.Pending
	}
	return false
}

type InstallOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DisableHooks             bool   `protobuf:"varint,1,opt,name=disable_hooks,json=disableHooks,proto3" json:"disable_hooks,omitempty"`
	Replace                  bool   `protobuf:"varint,2,opt,name=replace,proto3" json:"replace,omitempty"`
	Wait                     bool   `protobuf:"varint,3,opt,name=wait,proto3" json:"wait,omitempty"`
	DependencyUpdate         bool   `protobuf:"varint,4,opt,name=dependency_update,json=dependencyUpdate,proto3" json:"dependency_update,omitempty"`
	Timeout                  int64  `protobuf:"varint,5,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Namespace                string `protobuf:"bytes,6,opt,name=namespace,proto3" json:"namespace,omitempty"`
	ReleaseName              string `protobuf:"bytes,7,opt,name=release_name,json=releaseName,proto3" json:"release_name,omitempty"`
	Version                  string `protobuf:"bytes,8,opt,name=version,proto3" json:"version,omitempty"`
	GenerateName             bool   `protobuf:"varint,9,opt,name=generate_name,json=generateName,proto3" json:"generate_name,omitempty"`
	NameTemplate             string `protobuf:"bytes,10,opt,name=name_template,json=nameTemplate,proto3" json:"name_template,omitempty"`
	Description              string `protobuf:"bytes,11,opt,name=description,proto3" json:"description,omitempty"`
	Atomic                   bool   `protobuf:"varint,12,opt,name=atomic,proto3" json:"atomic,omitempty"`
	SkipCrds                 bool   `protobuf:"varint,13,opt,name=skip_crds,json=skipCrds,proto3" json:"skip_crds,omitempty"`
	SubNotes                 bool   `protobuf:"varint,14,opt,name=sub_notes,json=subNotes,proto3" json:"sub_notes,omitempty"`
	DisableOpenApiValidation bool   `protobuf:"varint,15,opt,name=disable_open_api_validation,json=disableOpenApiValidation,proto3" json:"disable_open_api_validation,omitempty"`
	IncludeCrds              bool   `protobuf:"varint,16,opt,name=include_crds,json=includeCrds,proto3" json:"include_crds,omitempty"`
}

func (x *InstallOption) Reset() {
	*x = InstallOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_helm_option_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstallOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstallOption) ProtoMessage() {}

func (x *InstallOption) ProtoReflect() protoreflect.Message {
	mi := &file_helm_option_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstallOption.ProtoReflect.Descriptor instead.
func (*InstallOption) Descriptor() ([]byte, []int) {
	return file_helm_option_proto_rawDescGZIP(), []int{2}
}

func (x *InstallOption) GetDisableHooks() bool {
	if x != nil {
		return x.DisableHooks
	}
	return false
}

func (x *InstallOption) GetReplace() bool {
	if x != nil {
		return x.Replace
	}
	return false
}

func (x *InstallOption) GetWait() bool {
	if x != nil {
		return x.Wait
	}
	return false
}

func (x *InstallOption) GetDependencyUpdate() bool {
	if x != nil {
		return x.DependencyUpdate
	}
	return false
}

func (x *InstallOption) GetTimeout() int64 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *InstallOption) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *InstallOption) GetReleaseName() string {
	if x != nil {
		return x.ReleaseName
	}
	return ""
}

func (x *InstallOption) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *InstallOption) GetGenerateName() bool {
	if x != nil {
		return x.GenerateName
	}
	return false
}

func (x *InstallOption) GetNameTemplate() string {
	if x != nil {
		return x.NameTemplate
	}
	return ""
}

func (x *InstallOption) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *InstallOption) GetAtomic() bool {
	if x != nil {
		return x.Atomic
	}
	return false
}

func (x *InstallOption) GetSkipCrds() bool {
	if x != nil {
		return x.SkipCrds
	}
	return false
}

func (x *InstallOption) GetSubNotes() bool {
	if x != nil {
		return x.SubNotes
	}
	return false
}

func (x *InstallOption) GetDisableOpenApiValidation() bool {
	if x != nil {
		return x.DisableOpenApiValidation
	}
	return false
}

func (x *InstallOption) GetIncludeCrds() bool {
	if x != nil {
		return x.IncludeCrds
	}
	return false
}

type UpgradeOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Install                  bool   `protobuf:"varint,1,opt,name=install,proto3" json:"install,omitempty"`
	Devel                    bool   `protobuf:"varint,2,opt,name=devel,proto3" json:"devel,omitempty"`
	Namespace                string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	SkipCrds                 bool   `protobuf:"varint,4,opt,name=skip_crds,json=skipCrds,proto3" json:"skip_crds,omitempty"`
	Timeout                  int64  `protobuf:"varint,5,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Wait                     bool   `protobuf:"varint,6,opt,name=wait,proto3" json:"wait,omitempty"`
	DisableHooks             bool   `protobuf:"varint,7,opt,name=disable_hooks,json=disableHooks,proto3" json:"disable_hooks,omitempty"`
	DryRun                   bool   `protobuf:"varint,8,opt,name=dry_run,json=dryRun,proto3" json:"dry_run,omitempty"`
	Force                    bool   `protobuf:"varint,9,opt,name=force,proto3" json:"force,omitempty"`
	ResetValues              bool   `protobuf:"varint,10,opt,name=reset_values,json=resetValues,proto3" json:"reset_values,omitempty"`
	ReuseValues              bool   `protobuf:"varint,11,opt,name=reuse_values,json=reuseValues,proto3" json:"reuse_values,omitempty"`
	Recreate                 bool   `protobuf:"varint,12,opt,name=recreate,proto3" json:"recreate,omitempty"`
	MaxHistory               int64  `protobuf:"varint,13,opt,name=max_history,json=maxHistory,proto3" json:"max_history,omitempty"`
	Atomic                   bool   `protobuf:"varint,14,opt,name=atomic,proto3" json:"atomic,omitempty"`
	CleanupOnFail            bool   `protobuf:"varint,15,opt,name=cleanup_on_fail,json=cleanupOnFail,proto3" json:"cleanup_on_fail,omitempty"`
	SubNotes                 bool   `protobuf:"varint,16,opt,name=sub_notes,json=subNotes,proto3" json:"sub_notes,omitempty"`
	Description              string `protobuf:"bytes,17,opt,name=description,proto3" json:"description,omitempty"`
	DisableOpenApiValidation bool   `protobuf:"varint,18,opt,name=disable_open_api_validation,json=disableOpenApiValidation,proto3" json:"disable_open_api_validation,omitempty"`
	ReleaseName              string `protobuf:"bytes,19,opt,name=release_name,json=releaseName,proto3" json:"release_name,omitempty"`
	UpgradeCrds              bool   `protobuf:"varint,20,opt,name=upgrade_crds,json=upgradeCrds,proto3" json:"upgrade_crds,omitempty"`
}

func (x *UpgradeOption) Reset() {
	*x = UpgradeOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_helm_option_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpgradeOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeOption) ProtoMessage() {}

func (x *UpgradeOption) ProtoReflect() protoreflect.Message {
	mi := &file_helm_option_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeOption.ProtoReflect.Descriptor instead.
func (*UpgradeOption) Descriptor() ([]byte, []int) {
	return file_helm_option_proto_rawDescGZIP(), []int{3}
}

func (x *UpgradeOption) GetInstall() bool {
	if x != nil {
		return x.Install
	}
	return false
}

func (x *UpgradeOption) GetDevel() bool {
	if x != nil {
		return x.Devel
	}
	return false
}

func (x *UpgradeOption) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *UpgradeOption) GetSkipCrds() bool {
	if x != nil {
		return x.SkipCrds
	}
	return false
}

func (x *UpgradeOption) GetTimeout() int64 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *UpgradeOption) GetWait() bool {
	if x != nil {
		return x.Wait
	}
	return false
}

func (x *UpgradeOption) GetDisableHooks() bool {
	if x != nil {
		return x.DisableHooks
	}
	return false
}

func (x *UpgradeOption) GetDryRun() bool {
	if x != nil {
		return x.DryRun
	}
	return false
}

func (x *UpgradeOption) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

func (x *UpgradeOption) GetResetValues() bool {
	if x != nil {
		return x.ResetValues
	}
	return false
}

func (x *UpgradeOption) GetReuseValues() bool {
	if x != nil {
		return x.ReuseValues
	}
	return false
}

func (x *UpgradeOption) GetRecreate() bool {
	if x != nil {
		return x.Recreate
	}
	return false
}

func (x *UpgradeOption) GetMaxHistory() int64 {
	if x != nil {
		return x.MaxHistory
	}
	return 0
}

func (x *UpgradeOption) GetAtomic() bool {
	if x != nil {
		return x.Atomic
	}
	return false
}

func (x *UpgradeOption) GetCleanupOnFail() bool {
	if x != nil {
		return x.CleanupOnFail
	}
	return false
}

func (x *UpgradeOption) GetSubNotes() bool {
	if x != nil {
		return x.SubNotes
	}
	return false
}

func (x *UpgradeOption) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpgradeOption) GetDisableOpenApiValidation() bool {
	if x != nil {
		return x.DisableOpenApiValidation
	}
	return false
}

func (x *UpgradeOption) GetReleaseName() string {
	if x != nil {
		return x.ReleaseName
	}
	return ""
}

func (x *UpgradeOption) GetUpgradeCrds() bool {
	if x != nil {
		return x.UpgradeCrds
	}
	return false
}

type UninstallOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DisableHooks bool   `protobuf:"varint,1,opt,name=disable_hooks,json=disableHooks,proto3" json:"disable_hooks,omitempty"`
	DryRun       bool   `protobuf:"varint,2,opt,name=dry_run,json=dryRun,proto3" json:"dry_run,omitempty"`
	KeepHistory  bool   `protobuf:"varint,3,opt,name=keep_history,json=keepHistory,proto3" json:"keep_history,omitempty"`
	Timeout      int64  `protobuf:"varint,4,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Description  string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *UninstallOption) Reset() {
	*x = UninstallOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_helm_option_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UninstallOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UninstallOption) ProtoMessage() {}

func (x *UninstallOption) ProtoReflect() protoreflect.Message {
	mi := &file_helm_option_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UninstallOption.ProtoReflect.Descriptor instead.
func (*UninstallOption) Descriptor() ([]byte, []int) {
	return file_helm_option_proto_rawDescGZIP(), []int{4}
}

func (x *UninstallOption) GetDisableHooks() bool {
	if x != nil {
		return x.DisableHooks
	}
	return false
}

func (x *UninstallOption) GetDryRun() bool {
	if x != nil {
		return x.DryRun
	}
	return false
}

func (x *UninstallOption) GetKeepHistory() bool {
	if x != nil {
		return x.KeepHistory
	}
	return false
}

func (x *UninstallOption) GetTimeout() int64 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *UninstallOption) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

var File_helm_option_proto protoreflect.FileDescriptor

var file_helm_option_proto_rawDesc = []byte{
	0x0a, 0x11, 0x68, 0x65, 0x6c, 0x6d, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x04, 0x68, 0x65, 0x6c, 0x6d, 0x22, 0xaf, 0x01, 0x0a, 0x07, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x63,
	0x61, 0x63, 0x68, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x69, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x6c, 0x69, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x22, 0xc4, 0x02, 0x0a, 0x0a,
	0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x6c,
	0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x61, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x73, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x62, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x68, 0x6f, 0x72,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x75, 0x6e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x75, 0x6e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x75, 0x70, 0x65, 0x72, 0x73, 0x65, 0x64, 0x65, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x75, 0x70, 0x65, 0x72, 0x73, 0x65, 0x64, 0x65, 0x64,
	0x12, 0x22, 0x0a, 0x0c, 0x75, 0x6e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x75, 0x6e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x22, 0xa4, 0x04, 0x0a, 0x0d, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x48, 0x6f, 0x6f, 0x6b, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x61, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x04, 0x77, 0x61, 0x69, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x64, 0x65, 0x70, 0x65, 0x6e,
	0x64, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x10, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x63, 0x72, 0x64, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x73, 0x6b, 0x69, 0x70, 0x43, 0x72, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75,
	0x62, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73,
	0x75, 0x62, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x1b, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x70, 0x69, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x5f, 0x63, 0x72, 0x64, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x43, 0x72, 0x64, 0x73, 0x22, 0x83, 0x05, 0x0a, 0x0d, 0x55, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6b, 0x69,
	0x70, 0x5f, 0x63, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x6b,
	0x69, 0x70, 0x43, 0x72, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x77, 0x61, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04,
	0x77, 0x61, 0x69, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x48, 0x6f, 0x6f, 0x6b, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x72, 0x79,
	0x5f, 0x72, 0x75, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64, 0x72, 0x79, 0x52,
	0x75, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x65,
	0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x72, 0x65, 0x73, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x72,
	0x65, 0x75, 0x73, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x72, 0x65, 0x75, 0x73, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x65, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x72, 0x65, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61,
	0x78, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x6d, 0x61, 0x78, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x74, 0x6f, 0x6d, 0x69, 0x63, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x74, 0x6f,
	0x6d, 0x69, 0x63, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x5f, 0x6f,
	0x6e, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x63, 0x6c,
	0x65, 0x61, 0x6e, 0x75, 0x70, 0x4f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x75, 0x62, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x73, 0x75, 0x62, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x1b, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x18, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x70, 0x69, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x63, 0x72, 0x64, 0x73, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x43, 0x72, 0x64, 0x73, 0x22,
	0xae, 0x01, 0x0a, 0x0f, 0x55, 0x6e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x68,
	0x6f, 0x6f, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x48, 0x6f, 0x6f, 0x6b, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x72, 0x79, 0x5f,
	0x72, 0x75, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64, 0x72, 0x79, 0x52, 0x75,
	0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6b, 0x65, 0x65, 0x70, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x11, 0x5a, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x2f, 0x68,
	0x65, 0x6c, 0x6d, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_helm_option_proto_rawDescOnce sync.Once
	file_helm_option_proto_rawDescData = file_helm_option_proto_rawDesc
)

func file_helm_option_proto_rawDescGZIP() []byte {
	file_helm_option_proto_rawDescOnce.Do(func() {
		file_helm_option_proto_rawDescData = protoimpl.X.CompressGZIP(file_helm_option_proto_rawDescData)
	})
	return file_helm_option_proto_rawDescData
}

var file_helm_option_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_helm_option_proto_goTypes = []interface{}{
	(*Options)(nil),         // 0: helm.Options
	(*ListOption)(nil),      // 1: helm.ListOption
	(*InstallOption)(nil),   // 2: helm.InstallOption
	(*UpgradeOption)(nil),   // 3: helm.UpgradeOption
	(*UninstallOption)(nil), // 4: helm.UninstallOption
}
var file_helm_option_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_helm_option_proto_init() }
func file_helm_option_proto_init() {
	if File_helm_option_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_helm_option_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Options); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_helm_option_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_helm_option_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstallOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_helm_option_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpgradeOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_helm_option_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UninstallOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_helm_option_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_helm_option_proto_goTypes,
		DependencyIndexes: file_helm_option_proto_depIdxs,
		MessageInfos:      file_helm_option_proto_msgTypes,
	}.Build()
	File_helm_option_proto = out.File
	file_helm_option_proto_rawDesc = nil
	file_helm_option_proto_goTypes = nil
	file_helm_option_proto_depIdxs = nil
}
